
# app/handlers/common.py
"""–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."""

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.state import default_state # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

from app.keyboards.inline_buttons import create_inline_universal_keyboard # –ù—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
from app.utils.constants import WELCOME_TEXT, FEEDBACK_TEXT, HELP_BUTTON_TEXT, START_QUERY_CALLBACK # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
from app.utils.logger import setup_logger
from app.stats.state_manager import state_manager # –ù—É–∂–µ–Ω state_manager

logger = setup_logger(__name__)

async def send_message_with_keyboard(message: types.Message, text: str, keyboard=None, parse_mode="HTML"):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try:
        if not text:
            logger.warning("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            text = "..."
        return await message.answer(text, parse_mode=parse_mode, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        return await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏ –ü–û–ö–ê–ó–´–í–ê–ï–¢ –ö–ù–û–ü–ö–£."""
    await state.clear() # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ /start
    user_name = message.from_user.first_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({user_name}) –∑–∞–ø—É—Å—Ç–∏–ª /start.")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    buttons = {HELP_BUTTON_TEXT: START_QUERY_CALLBACK}
    # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è create_inline_universal_keyboard —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
    keyboard = create_inline_universal_keyboard(buttons, 1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await send_message_with_keyboard(
        message,
        WELCOME_TEXT.format(user_name=user_name),
        keyboard=keyboard # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    # –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ù–ï –≤—ã–∑—ã–≤–∞–µ–º state_manager –∑–¥–µ—Å—å

# üîπ –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"
async def start_query_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –ó–ê–ü–£–°–ö–ê–ï–¢ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '{START_QUERY_CALLBACK}'")

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback_query.answer()

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.message.edit_text(FEEDBACK_TEXT,parse_mode="HTML")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {callback_query.message.message_id} –¥–ª—è user {user_id}: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –§–ò–ö–¢–ò–í–ù–û–ï –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "start" –¥–ª—è State Manager
    # –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã State Manager –∑–Ω–∞–ª, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥
    await state.set_state("start")
    logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'start' –¥–ª—è user {user_id} –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (waiting_for_question)
    # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º–µ–Ω–Ω–æ callback_query, StateManager —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è
    await state_manager.handle_transition(callback_query, state, "next")