from aiogram import Dispatcher, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state

from app.handlers.common import start_handler, start_query_callback_handler
from app.handlers.process_query import process_enter_query
from app.stats.question_stats import QuestionStates
from app.utils.constants import HELP_BUTTON_CALLBACK, HELP_BUTTON_TEXT, START_QUERY_CALLBACK
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = Router()


def setup_dispatcher(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""

    # üìå –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    router.message.register(start_handler, Command("start"))

    router.callback_query.register(start_query_callback_handler,
        F.data == START_QUERY_CALLBACK,
        StateFilter(default_state))

    # üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
    router.message.register(
        process_enter_query,
        StateFilter(QuestionStates.waiting_for_question), # <--- –ò–ó–ú–ï–ù–ò –ó–î–ï–°–¨
        F.text,
        ~F.text.startswith('/')
    )


    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    dp.include_router(router)
