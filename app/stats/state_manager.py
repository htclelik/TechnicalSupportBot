# # app/state_management/state_manager.py
from typing import Dict, Callable, Awaitable

from aiogram import types
from aiogram.fsm.context import FSMContext

from app.stats.question_stats import QuestionStates
from app.stats.state_transitions import STATE_TRANSITIONS
from app.utils.logger import setup_logger

logger = setup_logger(__name__)


async def validate_booking_data(state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    user_data = await state.get_data()
    required_fields = ['date', 'user_id', 'question', 'user_name']

    if not all(field in user_data for field in required_fields):
        return False, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."

    return True, user_data


class StateManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

    –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
      - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
      - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞) —É–ø—Ä–æ—â–∞–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
      - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–Ω–∏–∂–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """

    def __init__(self):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
        self.state_handlers: Dict[str, Dict[str, Callable[[types.Message, FSMContext], Awaitable[None]]]] = {}

    def register_state(self, state_name: str, entry_handler: Callable[[types.Message, FSMContext], Awaitable[None]]):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
        """
        self.state_handlers[state_name] = {"entry": entry_handler}

    async def handle_transition(self, msg: types.Message, state: FSMContext, action: str = "next"):
        """
        –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.

        –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
          - –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥) –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.
          - –û–±–ª–µ–≥—á–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ—Ç–ª–∞–¥–∫–∏.
        """
        current_state = await state.get_state()
        if current_state is None:
            logger.error("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return  # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        if action == "back":
            previous_state = STATE_TRANSITIONS.get(current_state, {}).get("back")
            if previous_state:
                await state.set_state(previous_state)
                logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞–∑–∞–¥: {current_state} -> {previous_state}")
                await self._handle_state_entry(msg, state, previous_state)
                return

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        next_state = STATE_TRANSITIONS.get(current_state, {}).get(action)
        if not next_state:
            logger.warning(f"–ù–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action}' –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è '{current_state}'")
            return

        await state.set_state(next_state)
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥: {current_state} -> {next_state} –ø–æ –¥–µ–π—Å—Ç–≤–∏—é '{action}'")
        await self._handle_state_entry(msg, state, next_state)


    async def _handle_state_entry(self, msg: types.Message, state: FSMContext, next_state: str):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

        –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
          - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∏–∑–º–µ–Ω—è—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞.
          - –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
        """
        handlers = {
            QuestionStates.waiting_for_question.state: self._handle_question_entry,
            QuestionStates.waiting_for_creating_record_request.state: self._handle_show_recording_user_request,
            QuestionStates.finish.state: self._handle_finish

        }
        handler = handlers.get(next_state)
        if handler:
            await handler(msg, state)
        else:
            logger.error(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {next_state} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async def _handle_question_entry(self, msg: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏.

        –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
          - –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –æ–±–ª–µ–≥—á–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —à–∞–≥–∞.
        """

        await msg.answer(
            f"üôã–ù–∞–ø–∏—à–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É",
            parse_mode="HTML"

        )

    async def _handle_show_recording_user_request(self, msg: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–∫–∏. –ó–∞–ø–∏—Å—å –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –£–ñ–ï –ø—Ä–æ–∏–∑–æ—à–ª–∏.
        """
        logger.info(f"–í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_creating_record_request –¥–ª—è user {msg.chat.id}")
        user_data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
        user_name = user_data.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        user_id = user_data.get("user_id", "N/A")
        id_query = user_data.get("id_query", "N/A")
        query_text = user_data.get("query", "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        date_str = user_data.get("date", "–î–∞—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")  # –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        await state.update_data(user_name=user_name, user_id=user_id, id_query=id_query, date=date_str, query=query_text)
        logger.info(f"–î–ª—è user_name {user_name},—Å–æ–∑–¥–∞–Ω question_id {id_query}")


        summary_question_text = (

            f"<b>‚ùï–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏‚ùï:</b>\n\n"
            f"üë§<b>{user_name}</b>\n\n>"
            f"<i>–í–∞—à ‚Ññ üÜî–∑–∞—è–≤–∫–∏(–æ–±—Ä–∞—â–µ–Ω–∏—è):</i> <b>{id_query}</b>\n"
            f"üìù<i>–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:</i> <b>{query_text}</b>\n\n"
            f"üìÖ<i>–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è :</i> <b>{date_str}</b>\n"
            f"–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ - –ø–æ–∑–∂–µ –º—ã —Å–æ–æ–±—â–∏–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"

            # –õ—É—á—à–µ \n –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        )
        await msg.answer(
            summary_question_text,
            parse_mode="HTML"
        )
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        logger.debug("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ waiting_for_creating_record_request –≤ finish")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º message, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
        await self.handle_transition(msg, state, "next")

    async def _handle_finish(self, msg: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        """
        logger.info(f"–í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ finish –¥–ª—è user {msg.chat.id}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        await msg.answer(
            f"üôè–°–ø–∞—Å–∏–±–æ —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            parse_mode="HTML"
        )
        await state.clear()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è state_manager –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
state_manager = StateManager()

